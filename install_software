# Install matplotlib
# bash:
# 
#     sudo apt-get install python-matplotlib

# Install R
# bash:
#   sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
#   sudo add-apt-repository -y "deb http://cran.rstudio.com/bin/linux/ubuntu $(lsb_release -s -c)/"
#   sudo apt-get update -y
#   sudo apt-get install -y r-base r-base-dev

# Install Julia
# Download binaries and add bin directory to search path
# http://julialang.org/downloads/

# Install RCall, PyPLot, Gadfly for Julia
# julia
#    Pkg.add("Gadfly")
#    Pkg.add("PyPlot")
#    Pkg.add("RCall")
#    using Gadfly, PyPlot, RCall

# Install jupyter through julia IJulia.jl
# Pkg.add("IJulia")
# using IJulia
#
# Then add the binary path to bashrc to launch jupyter from terminal with: jupyter notebook
# using Conda; Conda.SRIPTDIR

# Installing jupyter-vim-bindings
# https://github.com/lambdalisue/jupyter-vim-binding
#
#     mkdir -p $(jupyter --data-dir)/nbextensions
#     cd $(jupyter --data-dir)/nbextensions
#     git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding
#     jupyter nbextension enable vim_binding/vim_binding

# Install jupyter-themes
# https://github.com/dunovank/jupyter-themes
#
# pip install --user git+https://github.com/dunovank/jupyter-themes.git
# ln -s ~/.local/bin/jupyter-theme ~/bin
#
# TO see what themes are available:
# jupyter-theme -l
#
# To install the theme: (e.g. oceans16)
# jupyter-theme -t oceans16
#
# add to ~/.jupyter/custom/custom.css
# /* Arthur Lui */
# .selected .CodeMirror-lines {
#   background: #363D44;  /*!important;*/
# }
#
# Replace the following line with the second line (for visual highlight)
#.cm-s-ipython div.CodeMirror-selected {background: #D4DDEC !important;}
#.cm-s-ipython div.CodeMirror-selected {background: #184A7B !important;}

# Install ChoroplethMaps.jl 
# https://github.com/penntaylor/ChoroplethMaps.jl
# Follow the instructions there:
#
# Pkg.clone("https://github.com/FugroRoames/Proj4.jl.git")
# Pkg.clone("https://github.com/penntaylor/DBaseReader.jl.git")
# Pkg.clone("https://github.com/penntaylor/ChoroplethMaps.jl.git")
# Pkg.add("ZipFile")
# Pkg.update()
# Pkg.build("Proj4")
#
# For some reason, can't use their choroplethmap function. But can call 
# from Gadfly. Must be a missing dependency. Maybe Compose?
#
# using ChoroplethMaps, DataFrames, Gadfly
# df = DataFrame(NAME=["Alabama", "Arkansas", "Louisiana", "Mississippi", "Tennessee"], PCT=[26.6673430422, 15.6204437142, 32.4899197277, 37.5052896066, 17.0874767458] )
# 
# plot(mapify(df, Provider.STATESUMMARY(), key=:NAME),
#      x=:CM_X, y=:CM_Y, group=:NAME, color=:PCT,
#      Geom.polygon(preserve_order=true, fill=true),
#      Coord.cartesian(fixed=true))

# Install Plots.jl, a good front end API for plotting
# http://plots.readthedocs.io/en/latest/
# use something else for backend (Gadfly)
#
# Pkg.add("Plots")
# using Plots
# gadfly()


# I've decided. For Julia Plotting: Gadfly + PlotlyJS
# Install PlotlyJS: 
# https://github.com/spencerlyon2/PlotlyJS.jl
# Pkg.add("ImageMagick") # for saving graphs
# Pkg.add("PlotlyJS")
# using Blink; Blink.AtomShell.install()
# using PlotlyJS, ImageMagick
# Pkg.add("Rsvg") # for saving plots as pdf, png, etc.
#
# Notes:
# savefig(myplot, "output_filename.html") # to save as html
# PlotlyJS.savefig3(myplot, "output_filename.pdf") # to save as pdf. Uses Rsvg.

# To change R plot size in jupyter, go to 
# ~/.julia/v0.4/RCall/src
# and edit IJulia.jl
# in function ijulia_init, replace with this:
#
#    #function ijulia_init()
#    function ijulia_init(w=8,h=5)
#        global const ijulia_file_dir = mktempdir()
#        ijulia_file_fmt = joinpath(ijulia_file_dir,"rij_%03d")
#        rcall(:options,rcalljl_filename=ijulia_file_fmt)
#    
#        #reval("options(device = function(filename=getOption('rcalljl_filename'),...) getOption('rcalljl_device')(filename,...))")
#        reval("options(device = function(filename=getOption('rcalljl_filename'),...) getOption('rcalljl_device')(filename,width=$w,height=$h,...))")
#    
#        Main.IJulia.push_postexecute_hook(ijulia_displayplots)
#        Main.IJulia.push_posterror_hook(ijulia_cleanup)
#        #ijulia_setdevice(MIME"image/png"())
#        ijulia_setdevice(MIME"image/svg+xml"())
#    end
#
#Then, in RCall.jl, add ijulia_init, to the exports. Remember
#the commas.
